"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[321],{460:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"migrating","title":"Migrating to v4","description":"tailwind-scrollbar@^4.0.0 supports Tailwindcss v4, but there are some breaking changes to be aware of.","source":"@site/docs/migrating.md","sourceDirName":".","slug":"/migrating","permalink":"/tailwind-scrollbar/migrating","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docs","previous":{"title":"Introduction","permalink":"/tailwind-scrollbar/"},"next":{"title":"Getting Started","permalink":"/tailwind-scrollbar/getting-started"}}');var o=t(4848),s=t(8453);const c={sidebar_position:2},i="Migrating to v4",a={},l=[{value:"<code>hover:</code> and <code>active:</code>",id:"hover-and-active",level:3}];function d(e){const r={code:"code",h1:"h1",h3:"h3",header:"header",p:"p",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"migrating-to-v4",children:"Migrating to v4"})}),"\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.code,{children:"tailwind-scrollbar@^4.0.0"})," supports Tailwindcss v4, but there are some ",(0,o.jsx)(r.strong,{children:"breaking changes"})," to be aware of."]}),"\n",(0,o.jsxs)(r.h3,{id:"hover-and-active",children:[(0,o.jsx)(r.code,{children:"hover:"})," and ",(0,o.jsx)(r.code,{children:"active:"})]}),"\n",(0,o.jsxs)(r.p,{children:["In v3, hover and active variants could be applied with Tailwind's built-in ",(0,o.jsx)(r.code,{children:"hover:"})," and ",(0,o.jsx)(r.code,{children:"active:"})," (e.g. ",(0,o.jsx)(r.code,{children:"hover:scrollbar-thumb-red-100"}),"). In v4, this has different, arguably more predictable, semantics: an element with ",(0,o.jsx)(r.code,{children:"hover:scrollbar-thumb-red-100"})," will cause its scrollbar's thumb to change colour when the ",(0,o.jsx)(r.strong,{children:"element"})," is hovered, not the scrollbar's thumb."]}),"\n",(0,o.jsxs)(r.p,{children:["Let's be honest, though, that's probably not what you're after. To apply variants just to the scrollbar's thumb, use ",(0,o.jsx)(r.code,{children:"scrollbar-hover:"})," and ",(0,o.jsx)(r.code,{children:"scrollbar-active:"}),". If, for some reason, you're wanting to apply these variants to the track or corner elements, ",(0,o.jsx)(r.code,{children:"scrollbar-track-hover:"}),", ",(0,o.jsx)(r.code,{children:"scrollbar-track-active:"}),", ",(0,o.jsx)(r.code,{children:"scrollbar-corner-hover:"}),", and ",(0,o.jsx)(r.code,{children:"scrollbar-corner-active:"})," are there for you."]}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsxs)(r.strong,{children:["In most cases, globally replacing ",(0,o.jsx)(r.code,{children:"hover:scrollbar"})," with ",(0,o.jsx)(r.code,{children:"scrollbar-hover:scrollbar"})," and ",(0,o.jsx)(r.code,{children:"active:scrollbar"})," with ",(0,o.jsx)(r.code,{children:"scrollbar-active:scrollbar"})," should be enough."]})})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>c,x:()=>i});var n=t(6540);const o={},s=n.createContext(o);function c(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);